$parameter ORDER 16

$storage A B C: $array[ORDER][ORDER] $of $uint<32>

$module [storeA] $in (I J: $uint<8> wval: $uint<32>) $out () $is
{
	A[I][J] := wval
}
$module [storeB] $in (I J: $uint<8> wval: $uint<32>) $out () $is
{
	B[I][J] := wval
}

$module [loadC] $in (I J : $uint<8>) $out (Y : $uint<32>) $is
{
	Y := C[I][J]
}

$module [dot_product_unrolled] $in (I J: $uint<8>) $out (result: $uint<32>) $is
{
	$branchblock[loop] {

		$dopipeline $depth 31 $fullrate
			$merge $entry $loopback
				$phi K := $zero<8> $on $entry nK $on $loopback
				$phi SUM0 := ($bitcast ($uint<32>) 0)  $on $entry nSUM0 $on $loopback
				$phi SUM1 := ($bitcast ($uint<32>) 0)  $on $entry nSUM1 $on $loopback
			$endmerge
			$volatile nK := (K + 2)
			$volatile continue_flag := (K < (ORDER-2))

			nSUM0 := (SUM0 + (A[I][K] * B[K][J]))
			nSUM1 := (SUM1 + (A[I][(K+1)] * B[(K+1)][J]))
		$while continue_flag
		$volatile fSUM := (nSUM0 + nSUM1)
	} (fSUM => result_exported)
	$volatile result := result_exported
}

$module [mmul] $in () $out () $is
{
	$branchblock[loop] {
	    $merge $entry I_loopback 
			$phi I := $zero<8> $on $entry nI $on I_loopback
		$endmerge
		$volatile nI := (I + 1)

		$dopipeline $depth 3 
			$merge $entry $loopback 
				$phi J := $zero<8> $on $entry nJ $on $loopback
			$endmerge
			$volatile nJ := (J + 1)
			$volatile continue_flag := (J < (ORDER - 1))
	
			// Use the unrolled version to speed things up.
			C[I][J] := ($call dot_product_unrolled (I J))
			
		$while continue_flag

	    $if (I < (ORDER-1)) $then $place [I_loopback] $endif
	}
}

$module [latencyTest] $in () $out () $is
{
	// This module is just here so that we can look at how much time it takes for a call to HW from C takes.
	$null
}

$pipe COUNT_SIGNAL: $uint<32> $depth 1 $signal

$module [counter_daemon]
	$in () $out () $is
{
	$branchblock[loop] {
		$dopipeline $depth 7 $fullrate
		$merge $entry $loopback
			$phi counter := $zero<32> $on $entry n_counter $on $loopback
		$endmerge
		$volatile n_counter := (counter + 1)
		COUNT_SIGNAL := counter
		$while 1
	}
}

$module [readCounter] $in () $out (count_value: $uint<32>) $is
{
	count_value := COUNT_SIGNAL
}

